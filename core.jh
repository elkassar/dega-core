// JDL definition for application 'core' generated with command 'jhipster export-jdl'

entity Category {
  name String required,
  description String,
  slug String required,
  parent String,
  clientId String required
}
entity Format {
  name String required,
  isDefault Boolean,
  clientId String,
  description String
}
entity Organization {
  name String required,
  email String required,
  phone String,
  siteTitle String required,
  tagLine String,
  description String,
  logoURL String,
  logoURLMobile String,
  favIconURL String,
  mobileIconURL String,
  baiduVerificationCode String,
  bingVerificationCode String,
  googleVerificationCode String,
  yandexVerificationCode String,
  facebookURL String,
  twitterURL String,
  instagramURL String,
  linkedInURL String,
  pinterestURL String,
  youTubeURL String,
  googlePlusURL String,
  githubURL String,
  facebookPageAccessToken String,
  gaTrackingCode String,
  githubClientId String,
  githubClientSecret String,
  twitterClientId String,
  twitterClientSecret String,
  facebookClientId String,
  facebookClientSecret String,
  googleClientId String,
  googleClientSecret String,
  linkedInClientId String,
  linkedInClientSecret String,
  instagramClientId String,
  instagramClientSecret String,
  mailchimpAPIKey String,
  siteLanguage String,
  timeZone String,
  clientId String required
}
entity Post {
  title String required,
  clientId String required,
  content String required,
  excerpt String,
  publishedDate ZonedDateTime required,
  publishedDateGMT ZonedDateTime required,
  lastUpdatedDate ZonedDateTime required,
  lastUpdatedDateGMT ZonedDateTime required,
  featured Boolean,
  sticky Boolean,
  updates String,
  slug String required,
  password String,
  featuredMedia String,
  subTitle String
}
entity Status {
  name String required,
  clientId String required,
  isDefault Boolean
}
entity Tag {
  name String required,
  slug String required,
  description String,
  clientId String required
}
relationship OneToMany {
  Status{post} to Post{status(name) required},
  Format{post} to Post{format(name) required}
}
relationship ManyToMany {
  Post{tag(name)} to Tag{post},
  Post{category(name)} to Category{post}
}

dto Category, Format, Organization, Post, Status, Tag with mapstruct
paginate Category, Format, Organization, Post, Status, Tag with pagination
service Category, Format, Organization, Post, Status, Tag with serviceImpl
search Category, Format, Organization, Post, Status, Tag with elasticsearch
microservice Category, Format, Organization, Post, Status, Tag with core
clientRootFolder Category, Format, Organization, Post, Status, Tag with core
